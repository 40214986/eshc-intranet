"""
Django settings for eshcIntranet project.

Generated by 'django-admin startproject' using Django 1.11.1.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os
import dj_database_url

# Machina
from machina import get_apps as get_machina_apps
from machina import MACHINA_MAIN_TEMPLATE_DIR
from machina import MACHINA_MAIN_STATIC_DIR

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
# BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
BASE_DIR = os.path.dirname(os.path.dirname(__file__))
PROJECT_ROOT = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '@4q_okbjg%)=z8wvp5$gpijii0-a*g1y39k$7dal==z#2ssc1p'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['*']

AUTHENTICATION_BACKENDS = (
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
)
# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'storages',

    # Waliki apps
    # 'waliki',
    # 'waliki.git',           # optional but recommended
    # 'waliki.attachments',   # optional but recommended
    # 'waliki.pdf',           # optional
    # 'waliki.search',        # optional, additional configuration required
    # 'waliki.slides',        # optional
    # 'waliki.togetherjs',    # optional

    # allauth required
    # 'django.contrib.auth',  # Already included above
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    # specific providers
    # 'allauth.socialaccount.providers.facebook',

    # django-wiki apps
    # 'django.contrib.sites',   # Already included above
    'django.contrib.humanize',
    'django_nyt',
    'mptt',
    'sekizai',
    'sorl.thumbnail',
    'wiki',
    'wiki.plugins.attachments',
    'wiki.plugins.notifications',
    'wiki.plugins.images',
    'wiki.plugins.macros',

    # Custom apps
    'home.apps.HomeConfig',
    'users.apps.UsersConfig',
    'leases.apps.LeasesConfig',
    'polls.apps.PollsConfig',

    # Machina related apps:
    # 'mptt',   # Already included above
    'haystack',
    'widget_tweaks'
] + get_machina_apps()

SITE_ID = 1 # This is for facebook login integration

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    # Machina
    'machina.apps.forum_permission.middleware.ForumPermissionMiddleware',
]


ROOT_URLCONF = 'eshcIntranet.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates'), 
                os.path.join(BASE_DIR, 'templates/account'),
                os.path.join(BASE_DIR, 'templates/waliki'),
                os.path.join(BASE_DIR, 'templates/machina'), 
                MACHINA_MAIN_TEMPLATE_DIR],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',

                # Machina
                'machina.core.context_processors.metadata',

                # django-wiki
                "sekizai.context_processors.sekizai",
            ],
            # 'loaders': [
                # 'django.template.loaders.filesystem.Loader',
                # 'django.template.loaders.app_directories.Loader']
        },
    },
]

WSGI_APPLICATION = 'eshcIntranet.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
#     }
# }


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'eshcdb',                      
        'USER': 'django',
        'PASSWORD': 'djangopass',
        'HOST': 'localhost',
        'PORT': '',
    }
}

db_from_env = dj_database_url.config()
DATABASES['default'].update(db_from_env)


# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_L10N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY')

AWS_STORAGE_BUCKET_NAME = 'eshc-bucket'
AWS_S3_REGION_NAME = 'eu-west-2'

# DEFAULT_FILE_STORAGE = 'storages.backends.s3boto.S3BotoStorage'
# STATICFILES_STORAGE = 'storages.backends.s3boto.S3BotoStorage'
STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

# S3_USE_SIGV4 = True
AWS_S3_SIGNATURE_VERSION='s3v4'

STATIC_URL = 'http://' + AWS_STORAGE_BUCKET_NAME + '.s3.amazonaws.com/'
ADMIN_MEDIA_PREFIX = STATIC_URL + 'admin/'

STATIC_ROOT = os.path.join(PROJECT_ROOT, 'staticfiles')
# STATIC_URL = '/static/'

# Extra places for collectstatic to find static files.
STATICFILES_DIRS = (
    os.path.join(PROJECT_ROOT, 'static'),
    # os.path.join(PROJECT_ROOT, 'waliki/static'),
    MACHINA_MAIN_STATIC_DIR,
)

CACHES = {
  'default': {
    'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
  },
  'machina_attachments': {
    'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
    'LOCATION': '/tmp',
  }
}

HAYSTACK_CONNECTIONS = {
  'default': {
    'ENGINE': 'haystack.backends.simple_backend.SimpleEngine',
  },
}

# STATICFILES_STORAGE = 'whitenoise.django.GzipManifestStaticFilesStorage'
# STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Custom settings
LOGIN_URL = '/accounts/login/'

# Waliki settings
# WALIKI_ANONYMOUS_USER_PERMISSIONS = {}
# WALIKI_LOGGED_USER_PERMISSIONS = {'view_page', 'add_page', 'change_page'}
# WALIKI_AVAILABLE_MARKUPS = ['Markdown']
# WALIKI_DATA_DIR = STATIC_URL + 'waliki_data/'

# django-wiki settings
WIKI_ACCOUNT_HANDLING = False
WIKI_ANONYMOUS = False
WIKI_ANONYMOUS_WRITE = False

# Email
EMAIL_USE_TLS = True
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_HOST_USER = 'eshc.finance@gmail.com'
EMAIL_HOST_PASSWORD = os.environ.get('GMAIL_PASS')
DEFAULT_FROM_EMAIL = 'eshc.finance@gmail.com'
DEFAULT_TO_EMAIL = 'eshc.finance@gmail.com'

# allauth settings
# ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_AUTHENTICATION_METHOD = 'username_email'
# ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
# ACCOUNT_SIGNUP_EMAIL_ENTER_TWICE = True

# Machina settings
MACHINA_FORUM_NAME = 'ESHC Forum'
MACHINA_DEFAULT_AUTHENTICATED_USER_FORUM_PERMISSIONS = [
    'can_see_forum',
    'can_read_forum',
    'can_start_new_topics',
    'can_reply_to_topics',
    'can_edit_own_posts',
    'can_post_without_approval',
    'can_create_polls',
    'can_vote_in_polls',
    'can_download_file',
]

if os.environ.get('HEROKU') == 'True':
    pass
else:
    from eshcIntranet.local_settings import *
